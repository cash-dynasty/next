generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String              @unique
  username              String              @unique
  password              String
  role                  Role                @default(USER)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  isConfirmed           Boolean             @default(false)
  suspendedUntil        DateTime            @default(now())
  BlockedIds            String[]
  friends               String[]
  isActive              Boolean             @default(false)
  lastSeen              DateTime            @default(now())
  confirmationTokenList ConfirmationToken[]
  messages              Message[]           @relation("message")
  conversations         Conversation[]      @relation("conversations")
  player                Player?             @relation("player")
}

model Conversation {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime  @default(now())
  messages     Message[] @relation("ConversationMessages")
  participants User[]    @relation("conversations")
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message        String
  createdAt      DateTime     @default(now())
  fromId         String       @db.Uuid
  conversationId String       @db.Uuid
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  from           User         @relation("message", fields: [fromId], references: [id])
}

model ConfirmationToken {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String
  createdAt DateTime  @default(now())
  validFor  DateTime
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  ownerId   String    @db.Uuid
  owner     User      @relation(fields: [ownerId], references: [id])
}

model Player {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation("player", fields: [userId], references: [id])
  userId            String   @unique @db.Uuid
  moneyBalance      Int      @default(0)
  income            Int      @default(0)
  points            Int      @default(0)
  lastBalanceUpdate DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
