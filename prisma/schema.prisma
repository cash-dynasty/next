generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String              @unique
  username              String              @unique
  password              String
  role                  Role                @default(USER)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  isConfirmed           Boolean             @default(false)
  suspendedUntil        DateTime            @default(now())
  BlockedIds            String[]
  friends               String[]
  isActive              Boolean             @default(false)
  lastSeen              DateTime            @default(now())
  confirmationTokenList ConfirmationToken[]
  messages              Message[]           @relation("message")
  conversations         Conversation[]      @relation("conversations")
  player                Player?             @relation("player")
}

model Conversation {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime  @default(now())
  messages     Message[] @relation("ConversationMessages")
  participants User[]    @relation("conversations")
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message        String
  createdAt      DateTime     @default(now())
  fromId         String       @db.Uuid
  conversationId String       @db.Uuid
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  from           User         @relation("message", fields: [fromId], references: [id])
}

model ConfirmationToken {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String
  createdAt DateTime  @default(now())
  validFor  DateTime
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  ownerId   String    @db.Uuid
  owner     User      @relation(fields: [ownerId], references: [id])
}

model Player {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              User       @relation("player", fields: [userId], references: [id], onDelete: Cascade)
  userId            String     @unique @db.Uuid
  moneyBalance      Float      @default(0)
  income            Float      @default(0)
  points            Int        @default(0)
  lastBalanceUpdate DateTime   @default(now())
  properties        Property[] @relation("property")
}

model Property {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  sector    Sector?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  owner     Player     @relation("property", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String     @db.Uuid
  buildings Building[] @relation("building")
}

model Building {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property         Property         @relation("building", fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId       String           @db.Uuid
  level            Int              @default(0)
  configBuilding   Config_Building? @relation(fields: [configBuildingId], references: [id])
  configBuildingId String?
}

model Config_Building {
  id                     String                       @id @unique
  name                   String
  description            String
  sector                 Sector
  maxLevel               Int
  requirements           Config_BuildingRequirement[]
  configRequiredBuilding Config_RequiredBuilding[]
  building               Building[]
}

model Config_BuildingRequirement {
  id                String                    @id @unique
  level             Int
  upgradePrice      Float                     @default(0)
  upgradeDuration   Int                       @default(0)
  requiredBuildings Config_RequiredBuilding[]
  configBuilding    Config_Building?          @relation(fields: [configBuildingId], references: [id])
  configBuildingId  String?
}

model Config_RequiredBuilding {
  id                          String                      @id @unique
  buildingId                  String?
  building                    Config_Building?            @relation(fields: [buildingId], references: [id])
  buildingLevel               Int
  configBuildingRequirement   Config_BuildingRequirement? @relation(fields: [configBuildingRequirementId], references: [id])
  configBuildingRequirementId String?
}

enum Sector {
  IT
  MEDIC
  FINANCE
  ARMY
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
